/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "message_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace com { namespace codinginfinity { namespace benchmark { namespace management { namespace thrift { namespace messages {

int _kMeasurementTypeValues[] = {
  MeasurementType::CPU,
  MeasurementType::MEM,
  MeasurementType::TIME
};
const char* _kMeasurementTypeNames[] = {
  "CPU",
  "MEM",
  "TIME"
};
const std::map<int, const char*> _MeasurementType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMeasurementTypeValues, _kMeasurementTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLanguageTypeValues[] = {
  LanguageType::JAVA
};
const char* _kLanguageTypeNames[] = {
  "JAVA"
};
const std::map<int, const char*> _LanguageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kLanguageTypeValues, _kLanguageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


JobSpecificationMessage::~JobSpecificationMessage() throw() {
}


void JobSpecificationMessage::__set_experimentId(const int32_t val) {
  this->experimentId = val;
}

void JobSpecificationMessage::__set_jobId(const int32_t val) {
  this->jobId = val;
}

void JobSpecificationMessage::__set_languageType(const LanguageType::type val) {
  this->languageType = val;
}

void JobSpecificationMessage::__set_measurementType(const MeasurementType::type val) {
  this->measurementType = val;
}

void JobSpecificationMessage::__set_dataset(const std::string& val) {
  this->dataset = val;
}

void JobSpecificationMessage::__set_algorithm(const std::string& val) {
  this->algorithm = val;
}

void JobSpecificationMessage::__set_timeout(const int32_t val) {
  this->timeout = val;
}

void JobSpecificationMessage::__set_probeInterval(const int32_t val) {
  this->probeInterval = val;
}

uint32_t JobSpecificationMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->experimentId);
          this->__isset.experimentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->jobId);
          this->__isset.jobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->languageType = (LanguageType::type)ecast0;
          this->__isset.languageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->measurementType = (MeasurementType::type)ecast1;
          this->__isset.measurementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->dataset);
          this->__isset.dataset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->algorithm);
          this->__isset.algorithm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timeout);
          this->__isset.timeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->probeInterval);
          this->__isset.probeInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JobSpecificationMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("JobSpecificationMessage");

  xfer += oprot->writeFieldBegin("experimentId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->experimentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jobId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->jobId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("languageType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->languageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("measurementType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->measurementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataset", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->dataset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("algorithm", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->algorithm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeout", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->timeout);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("probeInterval", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->probeInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JobSpecificationMessage &a, JobSpecificationMessage &b) {
  using ::std::swap;
  swap(a.experimentId, b.experimentId);
  swap(a.jobId, b.jobId);
  swap(a.languageType, b.languageType);
  swap(a.measurementType, b.measurementType);
  swap(a.dataset, b.dataset);
  swap(a.algorithm, b.algorithm);
  swap(a.timeout, b.timeout);
  swap(a.probeInterval, b.probeInterval);
  swap(a.__isset, b.__isset);
}

JobSpecificationMessage::JobSpecificationMessage(const JobSpecificationMessage& other2) {
  experimentId = other2.experimentId;
  jobId = other2.jobId;
  languageType = other2.languageType;
  measurementType = other2.measurementType;
  dataset = other2.dataset;
  algorithm = other2.algorithm;
  timeout = other2.timeout;
  probeInterval = other2.probeInterval;
  __isset = other2.__isset;
}
JobSpecificationMessage& JobSpecificationMessage::operator=(const JobSpecificationMessage& other3) {
  experimentId = other3.experimentId;
  jobId = other3.jobId;
  languageType = other3.languageType;
  measurementType = other3.measurementType;
  dataset = other3.dataset;
  algorithm = other3.algorithm;
  timeout = other3.timeout;
  probeInterval = other3.probeInterval;
  __isset = other3.__isset;
  return *this;
}
void JobSpecificationMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JobSpecificationMessage(";
  out << "experimentId=" << to_string(experimentId);
  out << ", " << "jobId=" << to_string(jobId);
  out << ", " << "languageType=" << to_string(languageType);
  out << ", " << "measurementType=" << to_string(measurementType);
  out << ", " << "dataset=" << to_string(dataset);
  out << ", " << "algorithm=" << to_string(algorithm);
  out << ", " << "timeout=" << to_string(timeout);
  out << ", " << "probeInterval=" << to_string(probeInterval);
  out << ")";
}


ResultMessage::~ResultMessage() throw() {
}


void ResultMessage::__set_experimentId(const int32_t val) {
  this->experimentId = val;
}

void ResultMessage::__set_jobId(const int32_t val) {
  this->jobId = val;
}

void ResultMessage::__set_measurements(const std::vector<Measurement> & val) {
  this->measurements = val;
}

uint32_t ResultMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->experimentId);
          this->__isset.experimentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->jobId);
          this->__isset.jobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->measurements.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->measurements.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->measurements[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.measurements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResultMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResultMessage");

  xfer += oprot->writeFieldBegin("experimentId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->experimentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jobId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->jobId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("measurements", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->measurements.size()));
    std::vector<Measurement> ::const_iterator _iter9;
    for (_iter9 = this->measurements.begin(); _iter9 != this->measurements.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResultMessage &a, ResultMessage &b) {
  using ::std::swap;
  swap(a.experimentId, b.experimentId);
  swap(a.jobId, b.jobId);
  swap(a.measurements, b.measurements);
  swap(a.__isset, b.__isset);
}

ResultMessage::ResultMessage(const ResultMessage& other10) {
  experimentId = other10.experimentId;
  jobId = other10.jobId;
  measurements = other10.measurements;
  __isset = other10.__isset;
}
ResultMessage& ResultMessage::operator=(const ResultMessage& other11) {
  experimentId = other11.experimentId;
  jobId = other11.jobId;
  measurements = other11.measurements;
  __isset = other11.__isset;
  return *this;
}
void ResultMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResultMessage(";
  out << "experimentId=" << to_string(experimentId);
  out << ", " << "jobId=" << to_string(jobId);
  out << ", " << "measurements=" << to_string(measurements);
  out << ")";
}


Measurement::~Measurement() throw() {
}


void Measurement::__set_timestamp(const int32_t val) {
  this->timestamp = val;
}

void Measurement::__set_value(const int32_t val) {
  this->value = val;
}

uint32_t Measurement::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Measurement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Measurement");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Measurement &a, Measurement &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

Measurement::Measurement(const Measurement& other12) {
  timestamp = other12.timestamp;
  value = other12.value;
  __isset = other12.__isset;
}
Measurement& Measurement::operator=(const Measurement& other13) {
  timestamp = other13.timestamp;
  value = other13.value;
  __isset = other13.__isset;
  return *this;
}
void Measurement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Measurement(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


Heartbeat::~Heartbeat() throw() {
}


void Heartbeat::__set_id(const std::string& val) {
  this->id = val;
}

void Heartbeat::__set_description(const std::string& val) {
  this->description = val;
}

void Heartbeat::__set_cpu(const std::string& val) {
  this->cpu = val;
}

void Heartbeat::__set_memory(const std::string& val) {
  this->memory = val;
}

void Heartbeat::__set_os(const std::string& val) {
  this->os = val;
}

void Heartbeat::__set_kernel(const std::string& val) {
  this->kernel = val;
}

void Heartbeat::__set_name(const std::string& val) {
  this->name = val;
}

void Heartbeat::__set_email(const std::string& val) {
  this->email = val;
}

void Heartbeat::__set_phone(const std::string& val) {
  this->phone = val;
}

void Heartbeat::__set_current(const int64_t val) {
  this->current = val;
}

void Heartbeat::__set_heartbeat(const int32_t val) {
  this->heartbeat = val;
}

void Heartbeat::__set_busy(const bool val) {
  this->busy = val;
}

uint32_t Heartbeat::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cpu);
          this->__isset.cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->memory);
          this->__isset.memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->os);
          this->__isset.os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kernel);
          this->__isset.kernel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->current);
          this->__isset.current = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heartbeat);
          this->__isset.heartbeat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->busy);
          this->__isset.busy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Heartbeat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Heartbeat");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpu", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->cpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->os);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kernel", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->kernel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->current);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heartbeat", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->heartbeat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("busy", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->busy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Heartbeat &a, Heartbeat &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.description, b.description);
  swap(a.cpu, b.cpu);
  swap(a.memory, b.memory);
  swap(a.os, b.os);
  swap(a.kernel, b.kernel);
  swap(a.name, b.name);
  swap(a.email, b.email);
  swap(a.phone, b.phone);
  swap(a.current, b.current);
  swap(a.heartbeat, b.heartbeat);
  swap(a.busy, b.busy);
  swap(a.__isset, b.__isset);
}

Heartbeat::Heartbeat(const Heartbeat& other14) {
  id = other14.id;
  description = other14.description;
  cpu = other14.cpu;
  memory = other14.memory;
  os = other14.os;
  kernel = other14.kernel;
  name = other14.name;
  email = other14.email;
  phone = other14.phone;
  current = other14.current;
  heartbeat = other14.heartbeat;
  busy = other14.busy;
  __isset = other14.__isset;
}
Heartbeat& Heartbeat::operator=(const Heartbeat& other15) {
  id = other15.id;
  description = other15.description;
  cpu = other15.cpu;
  memory = other15.memory;
  os = other15.os;
  kernel = other15.kernel;
  name = other15.name;
  email = other15.email;
  phone = other15.phone;
  current = other15.current;
  heartbeat = other15.heartbeat;
  busy = other15.busy;
  __isset = other15.__isset;
  return *this;
}
void Heartbeat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Heartbeat(";
  out << "id=" << to_string(id);
  out << ", " << "description=" << to_string(description);
  out << ", " << "cpu=" << to_string(cpu);
  out << ", " << "memory=" << to_string(memory);
  out << ", " << "os=" << to_string(os);
  out << ", " << "kernel=" << to_string(kernel);
  out << ", " << "name=" << to_string(name);
  out << ", " << "email=" << to_string(email);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "current=" << to_string(current);
  out << ", " << "heartbeat=" << to_string(heartbeat);
  out << ", " << "busy=" << to_string(busy);
  out << ")";
}

}}}}}} // namespace
