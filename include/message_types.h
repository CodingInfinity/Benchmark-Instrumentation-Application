/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef message_TYPES_H
#define message_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace com { namespace codinginfinity { namespace benchmark { namespace management { namespace thrift { namespace messages {

struct MeasurementType {
  enum type {
    CPU = 0,
    MEM = 1,
    TIME = 2
  };
};

extern const std::map<int, const char*> _MeasurementType_VALUES_TO_NAMES;

struct LanguageType {
  enum type {
    JAVA = 0
  };
};

extern const std::map<int, const char*> _LanguageType_VALUES_TO_NAMES;

class JobSpecificationMessage;

class ResultMessage;

class Measurement;

class Heartbeat;

typedef struct _JobSpecificationMessage__isset {
  _JobSpecificationMessage__isset() : experimentId(false), jobId(false), languageType(false), measurementType(false), dataset(false), algorithm(false), timeout(false), probeInterval(false) {}
  bool experimentId :1;
  bool jobId :1;
  bool languageType :1;
  bool measurementType :1;
  bool dataset :1;
  bool algorithm :1;
  bool timeout :1;
  bool probeInterval :1;
} _JobSpecificationMessage__isset;

class JobSpecificationMessage {
 public:

  JobSpecificationMessage(const JobSpecificationMessage&);
  JobSpecificationMessage& operator=(const JobSpecificationMessage&);
  JobSpecificationMessage() : experimentId(0), jobId(0), languageType((LanguageType::type)0), measurementType((MeasurementType::type)0), dataset(), algorithm(), timeout(0), probeInterval(0) {
  }

  virtual ~JobSpecificationMessage() throw();
  int32_t experimentId;
  int32_t jobId;
  LanguageType::type languageType;
  MeasurementType::type measurementType;
  std::string dataset;
  std::string algorithm;
  int32_t timeout;
  int32_t probeInterval;

  _JobSpecificationMessage__isset __isset;

  void __set_experimentId(const int32_t val);

  void __set_jobId(const int32_t val);

  void __set_languageType(const LanguageType::type val);

  void __set_measurementType(const MeasurementType::type val);

  void __set_dataset(const std::string& val);

  void __set_algorithm(const std::string& val);

  void __set_timeout(const int32_t val);

  void __set_probeInterval(const int32_t val);

  bool operator == (const JobSpecificationMessage & rhs) const
  {
    if (!(experimentId == rhs.experimentId))
      return false;
    if (!(jobId == rhs.jobId))
      return false;
    if (!(languageType == rhs.languageType))
      return false;
    if (!(measurementType == rhs.measurementType))
      return false;
    if (!(dataset == rhs.dataset))
      return false;
    if (!(algorithm == rhs.algorithm))
      return false;
    if (!(timeout == rhs.timeout))
      return false;
    if (!(probeInterval == rhs.probeInterval))
      return false;
    return true;
  }
  bool operator != (const JobSpecificationMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JobSpecificationMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(JobSpecificationMessage &a, JobSpecificationMessage &b);

inline std::ostream& operator<<(std::ostream& out, const JobSpecificationMessage& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ResultMessage__isset {
  _ResultMessage__isset() : experimentId(false), jobId(false), measurements(false) {}
  bool experimentId :1;
  bool jobId :1;
  bool measurements :1;
} _ResultMessage__isset;

class ResultMessage {
 public:

  ResultMessage(const ResultMessage&);
  ResultMessage& operator=(const ResultMessage&);
  ResultMessage() : experimentId(0), jobId(0) {
  }

  virtual ~ResultMessage() throw();
  int32_t experimentId;
  int32_t jobId;
  std::vector<Measurement>  measurements;

  _ResultMessage__isset __isset;

  void __set_experimentId(const int32_t val);

  void __set_jobId(const int32_t val);

  void __set_measurements(const std::vector<Measurement> & val);

  bool operator == (const ResultMessage & rhs) const
  {
    if (!(experimentId == rhs.experimentId))
      return false;
    if (!(jobId == rhs.jobId))
      return false;
    if (!(measurements == rhs.measurements))
      return false;
    return true;
  }
  bool operator != (const ResultMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResultMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResultMessage &a, ResultMessage &b);

inline std::ostream& operator<<(std::ostream& out, const ResultMessage& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Measurement__isset {
  _Measurement__isset() : timestamp(false), value(false) {}
  bool timestamp :1;
  bool value :1;
} _Measurement__isset;

class Measurement {
 public:

  Measurement(const Measurement&);
  Measurement& operator=(const Measurement&);
  Measurement() : timestamp(0), value(0) {
  }

  virtual ~Measurement() throw();
  int32_t timestamp;
  int32_t value;

  _Measurement__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_value(const int32_t val);

  bool operator == (const Measurement & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Measurement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Measurement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Measurement &a, Measurement &b);

inline std::ostream& operator<<(std::ostream& out, const Measurement& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Heartbeat__isset {
  _Heartbeat__isset() : id(false), description(false), cpu(false), memory(false), os(false), kernel(false), name(false), email(false), phone(false), current(false), heartbeat(false), busy(false) {}
  bool id :1;
  bool description :1;
  bool cpu :1;
  bool memory :1;
  bool os :1;
  bool kernel :1;
  bool name :1;
  bool email :1;
  bool phone :1;
  bool current :1;
  bool heartbeat :1;
  bool busy :1;
} _Heartbeat__isset;

class Heartbeat {
 public:

  Heartbeat(const Heartbeat&);
  Heartbeat& operator=(const Heartbeat&);
  Heartbeat() : id(), description(), cpu(), memory(), os(), kernel(), name(), email(), phone(), current(0), heartbeat(0), busy(0) {
  }

  virtual ~Heartbeat() throw();
  std::string id;
  std::string description;
  std::string cpu;
  std::string memory;
  std::string os;
  std::string kernel;
  std::string name;
  std::string email;
  std::string phone;
  int64_t current;
  int32_t heartbeat;
  bool busy;

  _Heartbeat__isset __isset;

  void __set_id(const std::string& val);

  void __set_description(const std::string& val);

  void __set_cpu(const std::string& val);

  void __set_memory(const std::string& val);

  void __set_os(const std::string& val);

  void __set_kernel(const std::string& val);

  void __set_name(const std::string& val);

  void __set_email(const std::string& val);

  void __set_phone(const std::string& val);

  void __set_current(const int64_t val);

  void __set_heartbeat(const int32_t val);

  void __set_busy(const bool val);

  bool operator == (const Heartbeat & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(cpu == rhs.cpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    if (!(os == rhs.os))
      return false;
    if (!(kernel == rhs.kernel))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(current == rhs.current))
      return false;
    if (!(heartbeat == rhs.heartbeat))
      return false;
    if (!(busy == rhs.busy))
      return false;
    return true;
  }
  bool operator != (const Heartbeat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Heartbeat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Heartbeat &a, Heartbeat &b);

inline std::ostream& operator<<(std::ostream& out, const Heartbeat& obj)
{
  obj.printTo(out);
  return out;
}

}}}}}} // namespace

#endif
